<?xml version="1.0" encoding="UTF-8"?>
<project name="ldl" default="init" basedir=".">
	<property name="src" value="src"/>
	<property name="lib" value="lib"/>
	<property name="build" value="bin"/>
	<property name="build.classes" value="${build}/classes"/>
	<property name="project dir" location="."/>
	<property name="releaseDir" value= "build"/>
	<property name="jarFile" value="ldl.jar"/>
	
	<property name="lexerFile" value="generation/lexparse/JFlex.jar"/>
	<property name="lexerDir" value="parse/lexer"/>
	<property name="lexerJava" value="Lexer.java"/>
	<property name="lexerSrc" value="generation/lexparse/src/Lexer.flex"/>
	
	<property name="parserFile" value="generation/lexparse/yacc.exe"/>
	<property name="parserDir" value="parse/parser"/>
	<property name="parserJava" value="Parser.java"/>
	<property name="parserSrc" value="generation/lexparse/src/Parser.yy"/>
	
	<!-- вывод информации -->
	<target name="init">
		<tstamp> 
			<format property="release date" pattern="dd MMM yyyy hh:mm:ss aa" locale="en,US"/>
		</tstamp>
		<echo>Begins: ${release date}</echo>
		<echo>Run by: ${user.name}</echo>
	</target>
	
	<!-- проверка на изменения исходных файлов лексера и парсера -->
	<target name="check.lexer.uptodate">
		<uptodate property="lexer.uptodate" srcfile="${lexerSrc}" targetfile="${src}/${lexerDir}/${lexerJava}"/>
	</target>
	
	<target name="check.parser.uptodate">
		<uptodate property="parser.uptodate" srcfile="${parserSrc}" targetfile="${src}/${parserDir}/${parserJava}"/>
	</target>

	<!-- генерация лексера -->
	<target name="generate lexer"  depends="check.lexer.uptodate" unless="lexer.uptodate" description="Creating lexer from ldl project">
		<java jar="${lexerFile}" fork="yes" failonerror="yes">
			<arg line="-d ${src}/${lexerDir} -nobak"/>
			<arg line="${lexerSrc}"/>
		</java>
		<echo> Lexer generated.</echo>
	</target>
	
	<!-- генерация парсера -->
    <target name="generate parser" depends="check.parser.uptodate" unless="parser.uptodate" description="Creating parser from ldl project">
        <exec executable="${project dir}/${parserFile}" dir="${src}/${parserDir}" failonerror="yes">
        	<arg line="-Jclass=Parser"/>
        	<arg line="-Jpackage=parse.parser"/>
        	<arg line="-Jnorun"/>
        	<arg line="-Jnoconstruct"/>
        	<arg line="-d"/>
        	<arg line="-v"/>
            <arg line="-J ${project dir}/${parserSrc}"/>
        </exec>
    	<echo> Parser generated.</echo>
    </target>

	<target name="generate lexparse" depends="generate lexer, generate parser" description="Regenerating of lexer and parser"/>
	
	
	<!-- задание путей  либам --> 
	<path id="compile.classpath">
		<fileset dir="${lib}" includes="*.jar" excludes="junit.jar"/>
	</path>
	
	<!-- создание бинарников -->
    <target name="make build" depends="init, generate lexparse" description="Creating jar from ldl project">    	
    	<manifestclasspath property="jar.classpath" jarfile="${releaseDir}/${jarFile}">
    		<classpath refid="compile.classpath"/>
    	</manifestclasspath>
    	
		<!-- компиляция исходников -->
    	<mkdir dir="${build.classes}"/>
    	<echo> All sources will be recompiled.</echo>
    	<javac proceed="true" encoding="cp1251" debug="off" optimize="on" includeantruntime="true"
    		srcdir="${src}" destdir="${build.classes}" classpathref="compile.classpath"
    		excludes="testcases/**, testcode/**" target="1.6"/>
    	
    	<!-- создание jar -->
        <jar destfile="${releaseDir}/${jarFile}" basedir="${build.classes}">
        	<manifest>
        		<attribute name="Built-Time" value="${release date}"/>
        		<attribute name="Built-By" value="${user.name}"/>
        		<attribute name="Main-Class" value="application.Application"/>
        		<attribute name="Class-Path" value="${jar.classpath}"/>
        	</manifest>
        </jar>
    	<echo> ${jarFile} created </echo>
    	
    	<!-- копирование либ -->
    	<mkdir dir="${releaseDir}/lib"/>
    	<copy todir="${releaseDir}/lib" verbose="Yes" overwrite="yes" >
    		<fileset dir="${lib}" includes="**/*.jar" excludes="junit.jar"/>
    	</copy>
    	
    	<!-- копирование шаблонов -->
    	<mkdir dir="${releaseDir}/generation"/>
    	<mkdir dir="${releaseDir}/generation/templates"/>
    	<copy todir="${releaseDir}/generation/templates" verbose="Yes" overwrite="yes">
    		<fileset dir="generation/templates" includes="**/*.stg"/>
    	</copy>
    	
    	<!-- создание выходной папки -->
    	<mkdir dir="${releaseDir}/out"/>
    	
    	<!-- копирование примеров -->
    	<mkdir dir="${releaseDir}/samples"/>
    	<copy todir="${releaseDir}/samples" verbose="Yes" overwrite="yes">
    	    <fileset dir="testdata/samples" includes="**/**"/>
    	</copy>
    	
    	<delete dir="${build.classes}"/>
   	</target>

</project>